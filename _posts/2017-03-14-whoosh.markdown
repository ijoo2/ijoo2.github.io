---
layout:     post
title:      "Whoosh - Small Project"
tags:       [projects]
category:   [tech]
subtitle:   "a small side project that autocompletes text made in Python"
date:       2017-03-14 12:05:00
author:     "Inha Joo"
header-img: "img/Trees.jpg"
---

<p> Some time last year (or maybe two years?) I created a small project in Python called Whoosh. https://github.com/ijoo2/whoosh </p>

<p> It's a super simple program. I mainly made it to learn Python, and to practice binary trees since they are oh so common in interviews. Input in some text, and the program will autocomplete and suggest some words for you. For example, if you input "ca" the program might say "Did you mean cat?" I was originaly going to use some dictionary API to pull the words, but I decided to just use a static txt file containing all words in a dictionary. But how does it work? </p>

<p> The main data structure is an n-node <a href="https://en.wikipedia.org/wiki/Trie"> trie. </a> </p>

```
class TrieNode(object):
    def __init__(self, letter=''):
        self.letter = letter
        self.children = {}
        self.is_word = False
```

<p> The tree builds at the start of the program. It goes through every word in the dictionary, and constructs the tree. Each node contains the letter of the word. For example, to spell Cat, the tree would look like C -> A -> T. Every node has a flag to tell if it spells a word or not. That's pretty much it. It will read the input, traversing the tree letter by letter until it reached its destination. </p>

<p> I had one major obstacle which was fixed by using a <a href="https://en.wikipedia.org/wiki/Priority_queue"> Priority Queue. </a> Or a heapqueue in Python. When I input "ca" the program suggested to me something like "cab, cabbage, cabbages." To solve this issue, I've decided to use a priority queue with the closest words in respect to the node. Basically, if there are any 3 letter words, it will prioritize those words first. </p>
